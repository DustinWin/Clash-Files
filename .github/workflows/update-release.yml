name: Update release

on:
  workflow_dispatch:
  schedule:
    - cron: "30 18 * * 1,3,5"
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - ".github/workflows/delete-old-workflows.yml"

env:
  meta_download_url: https://github.com/MetaCubeX/Clash.Meta/releases/download
  adguardhome_download_url: https://github.com/AdguardTeam/AdGuardHome/releases/download
  meta_download_version: ''
  adguardhome_download_version: ''

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
          repo: drangjchen/clash-tools

      - name: Download and unzip UPX
        run: |
          echo "RELEASE_NAME=Released on $(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          mkdir -p ./tmp ./publish
          upx_version=$(curl -sSL https://api.github.com/repos/upx/upx/releases/latest | jq -r '.tag_name')
          upx_version_nov=${upx_version#v}
          echo "upx_version=${upx_version}" >> ${GITHUB_ENV}
          echo "upx_version_nov=${upx_version_nov}" >> ${GITHUB_ENV}
          wget -P ./tmp "https://github.com/upx/upx/releases/download/${upx_version}/upx-${upx_version_nov}-amd64_linux.tar.xz"
          tar -xf "./tmp/upx-${upx_version_nov}-amd64_linux.tar.xz" -C ./tmp
          rm -f ./tmp/*.tar.xz

      - name: Download and compress Clash.Meta core
        run: |
          meta_download_version=$(curl -sSL https://api.github.com/repos/MetaCubeX/Clash.Meta/releases/latest | jq -r '.tag_name')
          echo "meta_download_version=${meta_download_version}" >> ${GITHUB_ENV}
          wget "${meta_download_url}/${meta_download_version}/Clash.Meta-linux-arm64-${meta_download_version}.gz" -O "./tmp/clash.meta-linux-armv8.gz"
          gunzip -c "./tmp/clash.meta-linux-armv8.gz" > "./tmp/clash.meta-linux-armv8"
          chmod +x "./tmp/clash.meta-linux-armv8"
          "./tmp/upx-${upx_version_nov}-amd64_linux/upx" "./tmp/clash.meta-linux-armv8"
          rm -f "./tmp/clash.meta-linux-armv8.gz"

      - name: Download and compress AdGuardHome
        run: |
          adguardhome_download_version=$(curl -sSL https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest | jq -r '.tag_name')
          echo "adguardhome_download_version=${adguardhome_download_version}" >> ${GITHUB_ENV}
          wget "${adguardhome_download_url}/${adguardhome_download_version}/AdGuardHome_linux_arm64.tar.gz" -O - | tar -xz -C ./tmp
          chmod +x ./tmp/AdGuardHome/AdGuardHome
          "./tmp/upx-${upx_version_nov}-amd64_linux/upx" ./tmp/AdGuardHome/AdGuardHome
          mv -f ./tmp/AdGuardHome/AdGuardHome ./tmp/AdGuardHome-linux-armv8"
          rm -f "./tmp/AdGuardHome-linux-armv8.tar.gz"
          rm -rf ./tmp/AdGuardHome ./tmp/upx*

      - name: Move files
        run: |
          cp -f ./tmp/* ./publish
          rm -rf ./tmp
          cd ./publish || exit 1

      - name: Release and upload assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: latest
          tag: latest
          file_glob: true
          file: ./publish/*

      - name: Git push assets to "release" branch
        run: |
          cd ./publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Purge jsDelivr CDN
        run: |
          cd ./publish || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done
